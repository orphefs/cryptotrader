import os
from datetime import datetime

from src.definitions import DATA_DIR
from src.runner import Runner
from src.analysis_tools.run_metadata import RunMetaData


class TooManyArgumentsError(ValueError):
    pass


class runner:
    def __init__(self, trading_pair: str, trade_amount: float, run_type: str,
                 mock_data_start_time: datetime = None,
                 mock_data_stop_time: datetime = None,
                 path_to_stock_data: str = None
                 ):
        if (mock_data_start_time and mock_data_stop_time) and path_to_stock_data:
            raise TooManyArgumentsError("Either specify start and end time OR a path to the stock data file.")

        self._live_runner = Runner(trading_pair, trade_amount, run_type,
                                   mock_data_start_time, mock_data_stop_time,
                                   path_to_stock_data)

    def __enter__(self):
        self._live_runner.initialize()
        return self._live_runner

    def __exit__(self, exc_type, exc_value, traceback):
        if exc_type is not None:
            self._live_runner.shutdown()
            traceback.print_exception(exc_type, exc_value, traceback)
            return self

    @property
    def live_runner(self):
        return self._live_runner


def run_live():
    "Run the live algorithm with test orders (not placing real orders yet)."
    with runner(trading_pair="XRPBTC",
                trade_amount=100,
                run_type="live") as lr:
        lr.run()


def run_mock():
    "Replicate live run by using the information in the metadata file generated by the live runner. For comparing to live run."
    run_metadata = RunMetaData.load_from_disk(os.path.join(DATA_DIR, "run_metadata.dill"))
    if run_metadata.stop_time is None:
        run_metadata.stop_time = datetime.now()

    with runner(trading_pair="XRPBTC",
                trade_amount=100,
                run_type="mock",
                mock_data_start_time=run_metadata.start_time,
                mock_data_stop_time=run_metadata.stop_time,
                ) as lr:
        lr.run()


def run_backtest():
    "Run algorithm on historical data, simulating the live mode."
    with runner(trading_pair="NEOBTC",
                trade_amount=100,
                run_type="mock",
                # mock_data_start_time=datetime(2018, 10, 2),
                # mock_data_stop_time=datetime(2018, 10, 5),
                path_to_stock_data=os.path.join(DATA_DIR, "local_data_01_Oct,_2018_02_Oct,_2018_NEOBTC_1m.dill")
                ) as lr:
        lr.run()